{"version":3,"file":"reducer.js","sourceRoot":"","sources":["../core/reducer.ts"],"names":[],"mappings":";AACA,OAAO,EAAyB,eAAe,EAAW,MAAM,OAAO,CAAC;AACxE,OAAO,EAAE,aAAa,EAAe,MAAM,wBAAwB,CAAC;AACpE,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;AAa5B,eAAe;AACf,IAAM,gBAAgB,GAAG,sBAAsB,CAAC;AAahD,mDAAmD;AACnD,MAAM,UAAU,cAAc,CAAC,MAAc,EAAE,KAAa,EAAE,IAAY;IACtE,OAAO;QACH,IAAI,MAAA;QACJ,IAAI,EAAE,gBAAgB;QACtB,OAAO,EAAE,EAAE,MAAM,QAAA,EAAE,KAAK,OAAA,EAAE;KAC7B,CAAC;AACN,CAAC;AAED,SAAS,eAAe,CAAC,KAAwB,EAAE,MAAmB;;IAA7C,sBAAA,EAAA,UAAwB;IAC7C,8FAA8F;IAC9F,IAAI,MAAM,CAAC,IAAI,KAAK,gBAAgB,EAAE;QAC5B,IAAA,KAAiC,MAAM,CAAC,OAAgC,EAAtE,QAAM,YAAA,EAAS,WAAW,WAA4C,CAAC;QAC/E,6BAAY,KAAK,gBAAG,QAAM,IAAG,WAAW,OAAG;KAC9C;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AAQD;;GAEG;AACH,MAAM,CAAC,IAAM,cAAc,GAAG,qBAAqB,CAAC;AACpD,MAAM,UAAU,aAAa,CAAC,IAAa,EAAE,UAA6B;IAA7B,2BAAA,EAAA,qBAA6B;IACtE,OAAO;QACH,IAAI,EAAE,cAAc;QACpB,OAAO,EAAE,EAAE,UAAU,YAAA,EAAE,IAAI,MAAA,EAAE;KAChC,CAAC;AACN,CAAC;AAED,SAAS,cAAc,CAAC,KAAwB,EAAE,MAAoC;;IAA9D,sBAAA,EAAA,UAAwB;IAC5C,IAAI,MAAM,CAAC,IAAI,KAAK,cAAc,EAAE;QAChC,IAAM,OAAO,GAAG,MAAM,CAAC,OAA+B,CAAC;QACvD,IAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC7C,6BACO,KAAK,gBACP,OAAO,CAAC,UAAU,IAAG,KAAK,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OACvD;KACL;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AAED,eAAe;AACf,MAAM,UAAU,WAAW,CAAC,OAAgB;IACxC,OAAO,eAAe,CAAQ;QAC1B,MAAM,EAAE,aAAa,CAAC,OAAO,CAAC;QAC9B,OAAO,EAAE,cAAc;QACvB,GAAG,EAAE,eAAe;KACvB,CAAC,CAAC;AACP,CAAC;AAED,gDAAgD;AAChD,MAAM,UAAU,WAAW,CAAC,KAAY,EAAE,UAA6B;IAA7B,2BAAA,EAAA,qBAA6B;IACnE,OAAO,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;AACzC,CAAC;AAED,MAAM,CAAC,IAAM,uBAAuB,GAAG,cAAM,OAAA,UAAC,IAAS,IAAK,OAAA,UAAC,MAAmB;IAC5E,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5B,IAAM,OAAO,GAAG,GAAG,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAChD,IAAI,OAAO,EAAE;QACT,OAAO,wCAAI,MAAM,CAAC,OAAO,WAAE;KAC9B;IACD,OAAO,MAAM,CAAC;AAClB,CAAC,EAP2D,CAO3D,EAP4C,CAO5C,CAAC","sourcesContent":["import { History } from \"history\";\r\nimport { Action as ReduxAction, combineReducers, Reducer } from \"redux\";\r\nimport { connectRouter, RouterState } from \"connected-react-router\";\r\nimport { app } from \"./app\";\r\n\r\n// Redux State\r\ninterface LoadingState {\r\n    [loading: string]: number;\r\n}\r\n\r\nexport interface State {\r\n    loading: LoadingState;\r\n    router: RouterState;\r\n    app: object;\r\n}\r\n\r\n// Redux Action\r\nconst SET_STATE_ACTION = \"@@framework/setState\";\r\n\r\nexport interface Action<P> extends ReduxAction<string> {\r\n    payload: P;\r\n    name?: typeof SET_STATE_ACTION;\r\n}\r\n\r\n// Redux Action: SetState (to update state.app)\r\ninterface SetStateActionPayload {\r\n    module: string;\r\n    state: any;\r\n}\r\n\r\n// state must be complete module state, not partial\r\nexport function setStateAction(module: string, state: object, type: string): Action<SetStateActionPayload> {\r\n    return {\r\n        type,\r\n        name: SET_STATE_ACTION,\r\n        payload: { module, state },\r\n    };\r\n}\r\n\r\nfunction setStateReducer(state: State[\"app\"] = {}, action: Action<any>): State[\"app\"] {\r\n    // Use action.name for set state action, make type specifiable to make tracking/tooling easier\r\n    if (action.name === SET_STATE_ACTION) {\r\n        const { module, state: moduleState } = action.payload as SetStateActionPayload;\r\n        return { ...state, [module]: moduleState };\r\n    }\r\n    return state;\r\n}\r\n\r\n// Redux Action: Loading (to update state.loading)\r\ninterface LoadingActionPayload {\r\n    identifier: string;\r\n    show: boolean;\r\n}\r\n\r\n/**\r\n * 普通的 loading\r\n */\r\nexport const LOADING_ACTION = \"@@framework/loading\";\r\nexport function loadingAction(show: boolean, identifier: string = \"global\"): Action<LoadingActionPayload> {\r\n    return {\r\n        type: LOADING_ACTION,\r\n        payload: { identifier, show },\r\n    };\r\n}\r\n\r\nfunction loadingReducer(state: LoadingState = {}, action: Action<LoadingActionPayload>): LoadingState {\r\n    if (action.type === LOADING_ACTION) {\r\n        const payload = action.payload as LoadingActionPayload;\r\n        const count = state[payload.identifier] || 0;\r\n        return {\r\n            ...state,\r\n            [payload.identifier]: count + (payload.show ? 1 : -1),\r\n        };\r\n    }\r\n    return state;\r\n}\r\n\r\n// Root Reducer\r\nexport function rootReducer(history: History): Reducer<State> {\r\n    return combineReducers<State>({\r\n        router: connectRouter(history),\r\n        loading: loadingReducer,\r\n        app: setStateReducer,\r\n    });\r\n}\r\n\r\n// Helper function, to determine if show loading\r\nexport function showLoading(state: State, identifier: string = \"global\") {\r\n    return state.loading[identifier] > 0;\r\n}\r\n\r\nexport const executeMethodMiddleware = () => (next: any) => (action: Action<any>) => {\r\n    const result = next(action);\r\n    const handler = app.actionHandlers[action.type];\r\n    if (handler) {\r\n        handler(...action.payload);\r\n    }\r\n    return result;\r\n};\r\n"]}