{"version":3,"file":"bootstrap.js","sourceRoot":"","sources":["../../core/platform/bootstrap.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { Location } from \"history\";\r\nimport { ConnectedRouter } from \"connected-react-router\";\r\nimport { app } from \"../app\";\r\nimport { ErrorListener } from \"../module\";\r\nimport { captureError } from \"../util/error-util\";\r\nimport { ErrorBoundary } from \"../util/ErrorBoundary\";\r\n\r\ninterface BrowserConfig {\r\n    onIE?: () => void;\r\n    onLocationChange?: (location: Location) => void;\r\n    navigationPreventionMessage?: string;\r\n}\r\n\r\ninterface BootstrapOption {\r\n    componentType: React.ComponentType;\r\n    errorListener?: ErrorListener;\r\n    rootContainer?: HTMLElement | null;\r\n    browserConfig?: BrowserConfig;\r\n}\r\n\r\nexport const LOGGER_ACTION = \"@@framework/logger\";\r\nexport const VERSION_CHECK_ACTION = \"@@framework/version-check\";\r\nexport const GLOBAL_ERROR_ACTION = \"@@framework/global\";\r\nexport const GLOBAL_PROMISE_REJECTION_ACTION = \"@@framework/promise-rejection\";\r\n\r\nexport function bootstrap(option: BootstrapOption): void {\r\n    setupGlobalErrorHandler(option.errorListener);\r\n    setupLocationChangeListener(option.browserConfig?.onLocationChange);\r\n    renderRoot(option.componentType, option.rootContainer || injectRootContainer());\r\n}\r\n\r\nfunction setupGlobalErrorHandler(errorListener?: ErrorListener) {\r\n    if (errorListener) {\r\n        app.errorHandler = errorListener.onError.bind(errorListener);\r\n    }\r\n    window.addEventListener(\r\n        \"error\",\r\n        (event) => {\r\n            // event.preventDefault();\r\n            try {\r\n                const analyzeByTarget = (): string => {\r\n                    if (event.target && event.target !== window) {\r\n                        const element = event.target as HTMLElement;\r\n                        return `DOM source error: ${element.outerHTML}`;\r\n                    }\r\n                    return `Unrecognized error, serialized as ${JSON.stringify(event)}`;\r\n                };\r\n                captureError(event.error || event.message || analyzeByTarget(), GLOBAL_ERROR_ACTION);\r\n            } catch (e) {\r\n                //\r\n            }\r\n        },\r\n        true\r\n    );\r\n    window.addEventListener(\r\n        \"unhandledrejection\",\r\n        (event) => {\r\n            // event.preventDefault();\r\n            try {\r\n                captureError(event.reason, GLOBAL_PROMISE_REJECTION_ACTION);\r\n            } catch (e) {\r\n                //\r\n            }\r\n        },\r\n        true\r\n    );\r\n}\r\n\r\nfunction renderRoot(EntryComponent: React.ComponentType, rootContainer: HTMLElement) {\r\n    // eslint-disable-next-line react/no-deprecated\r\n    ReactDOM.render(\r\n        <Provider store={app.store}>\r\n            <ConnectedRouter history={app.browserHistory}>\r\n                <ErrorBoundary>\r\n                    <EntryComponent />\r\n                </ErrorBoundary>\r\n            </ConnectedRouter>\r\n        </Provider>,\r\n        rootContainer\r\n    );\r\n}\r\n\r\nfunction injectRootContainer(): HTMLElement {\r\n    const rootContainer = document.createElement(\"div\");\r\n    rootContainer.id = \"framework-app-root\";\r\n    document.body.appendChild(rootContainer);\r\n    return rootContainer;\r\n}\r\n\r\nfunction setupLocationChangeListener(listener?: (location: Location) => void) {\r\n    if (listener) {\r\n        app.browserHistory.listen(listener);\r\n    }\r\n}\r\n\r\n// export async function sendEventLogs(): Promise<void> {\r\n//     if (app.loggerConfig) {\r\n//         const logs = app.logger.collect(200);\r\n//         const logLength = logs.length;\r\n//         if (logLength > 0) {\r\n//             try {\r\n//                 /**\r\n//                  * Event server URL may be different from current domain (supposing abc.com)\r\n//                  *\r\n//                  * In order to support this, we must ensure:\r\n//                  * - Event server allows cross-origin request from current domain\r\n//                  * - Root-domain cookies, whose domain is set by current domain as \".abc.com\", can be sent (withCredentials = true)\r\n//                  */\r\n//                 // await ajax(\"POST\", app.loggerConfig.serverURL, {}, { events: logs }, { withCredentials: true });\r\n//                 app.logger.emptyLastCollection();\r\n//             } catch (e) {\r\n//                 if (e instanceof APIException) {\r\n//                     // For APIException, retry always leads to same error, so have to give up\r\n//                     // Do not log network exceptions\r\n//                     app.logger.emptyLastCollection();\r\n//                     app.logger.exception(e, { droppedLogs: logLength.toString() }, LOGGER_ACTION);\r\n//                 }\r\n//             }\r\n//         }\r\n//     }\r\n// }\r\n"]}